Карта проекта и назначения файлов
- main.py
     Точка входа. Создаёт QApplication, поднимает главное окно (из window.py) и запускает цикл событий (app.exec_()).
- window.py
     Главное окно приложения (QMainWindow).
     Важное внутри:
     Левая навигация (список/кнопки) и центральная область с QStackedWidget.
     Готовые панели: panel1, panel2, panel3, panel4, custom_panel, chat_panel, json_data_panel.
     Переключение вкладок/панелей, размещение контента, работа с правой «рабочей» областью.
     Обычно этот файл «склеивает» всё из ui/ (разметки вкладок, стили) и модели/БД.
- example.py
     Черновой сборник кода/фрагментов: куски инициализации БД (через psycopg2), форм с QFormLayout, примеры кнопок/навигации и т.п. Не похоже на рабочий модуль — это скорее «рыба»/наброски.
- Папка ui/ — интерфейс и конфиг
- ui/main_window.py
     Хелперы/логика для главного окна: организация лэйаутов, возможно фабрики виджетов, вспомогательные классы для боковой панели/контента. (Используется из window.py.)
- ui/ai_chat.py
     Модуль «чат с ИИ» для вкладки chat_panel.
     Обычно внутри:
     Логика отправки сообщений, вывод истории чата в виджетах, обработка ответа.
     Может использовать g4f/aiohttp для запросов к моделям.
     Сигналы/слоты PyQt для кнопок “Отправить”, поля ввода и т.д.
- ui/styling.py
     Стилейщик: QSS/палитры/темы, шрифты, отступы, тени и т.д.
     Отсюда подключаются общие стили для кнопок, списков, форм и панелей, чтобы всё выглядело единообразно.
- ui/tab_layouts.py
     Разметки/фабрики вкладок.
     Здесь создаются виджеты для panel1..panel4, custom_panel, возможно конструкторы форм: подписи, поля, кнопки «Рассчитать/Далее», контейнеры (QVBoxLayout/QFormLayout), привязки сигналов, вывод результатов расчётов.
- ui/structure.json
     Конфигурация предметной области (горные работы): список шахт, параметры «крепи», коэффициенты, дефолтные значения.

Примерные разделы:
mines — справочник шахт (UUID → название/параметры),
supports/lining — коэффициенты и формулы/пороговые значения для расчётов,
числа по умолчанию для интерфейса (глубина, влажность и т.д.).
Используется вкладками для подстановки значений в формы и расчёты.
Папка database/ — работа с PostgreSQL
database/postgres_connector.py
Класс-коннектор к Postgres (через psycopg2):
Подключение (host/db/user/password/port),
Создание таблиц при старте (если нет),
Методы записи результатов расчётов/параметров форм,
Закрытие соединения.
Его обычно создают в window.py при инициализации — и передают в нужные вкладки.
Папка models/ — расчёты/ML
models/mining_models.py
ML-модели на scikit-learn для инженерных расчётов:
Подготовка данных: StandardScaler, формирование X/y.
Обучение: RandomForestRegressor, MLPRegressor.
Методы predict_rf(...) / predict_nn(...) — принимают параметры (например, depth, rc, humidity, width, fracture) и возвращают прогноз.
Используется вкладками из ui/tab_layouts.py для выдачи «рекомендованных» параметров крепи/нагрузок и т.д.
Корень проекта
requirements.txt
Зависимости: PyQt5, numpy, scikit-learn, scipy, g4f, aiohttp и пр. — чтобы одним pip install -r requirements.txt поднять окружение.
README.md
Пустой (пока). Можно заполнить инструкцией по установке/запуску.
Как это всё вместе работает (типичный поток)
main.py запускает QApplication → создаёт MainWindow из window.py.
window.py:
Подключает стили из ui/styling.py.
Создаёт левую навигацию и QStackedWidget с вкладками.
Для вкладок вызывает фабрики/разметки из ui/tab_layouts.py.
Инициализирует БД через database/postgres_connector.py (опц.) и прокидывает коннектор в нужные табы.
Для чата подключает ui/ai_chat.py.
Пользователь вносит параметры (например, шахта/влажность/глубина) → по кнопке вызываются функции расчётов → models/mining_models.py выдаёт прогнозы/рекомендации → вывод в правой панели.
Результаты можно сохранить в PostgreSQL (если настроены доступы в postgres_connector.py).
